# Generated by Django 5.0.9 on 2025-09-13 21:55

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('python_code_check_system', '0002_auto_20250913_2150'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='solution',
            options={'ordering': ['-created_at'], 'verbose_name': 'Решение', 'verbose_name_plural': 'Решения'},
        ),
        migrations.AlterModelOptions(
            name='task',
            options={'ordering': ['-created_at'], 'verbose_name': 'Задание', 'verbose_name_plural': 'Задания'},
        ),
        migrations.AlterModelOptions(
            name='test',
            options={'ordering': ['created_at'], 'verbose_name': 'Тест', 'verbose_name_plural': 'Тесты'},
        ),
        migrations.RenameIndex(
            model_name='solution',
            new_name='python_code_student_3c0e86_idx',
            old_name='python_code_solution_student_task_idx',
        ),
        migrations.RenameIndex(
            model_name='solution',
            new_name='python_code_is_acce_c26cc5_idx',
            old_name='python_code_solution_is_accepted_idx',
        ),
        migrations.RenameIndex(
            model_name='solution',
            new_name='python_code_created_2e8fd7_idx',
            old_name='python_code_solution_created_at_idx',
        ),
        migrations.RenameIndex(
            model_name='task',
            new_name='python_code_is_acti_6583a0_idx',
            old_name='python_code_task_is_active_idx',
        ),
        migrations.RenameIndex(
            model_name='task',
            new_name='python_code_complex_5c0ef0_idx',
            old_name='python_code_task_complexity_idx',
        ),
        migrations.RenameIndex(
            model_name='task',
            new_name='python_code_created_d68596_idx',
            old_name='python_code_task_created_at_idx',
        ),
        migrations.RenameIndex(
            model_name='test',
            new_name='python_code_task_id_c2c0e0_idx',
            old_name='python_code_test_task_idx',
        ),
        migrations.AddField(
            model_name='solution',
            name='error_message',
            field=models.TextField(blank=True, help_text='Сообщение об ошибке при проверке кода', null=True),
        ),
        migrations.AlterField(
            model_name='solution',
            name='source_code',
            field=models.TextField(validators=[django.core.validators.MinLengthValidator(10, message='Код должен содержать минимум 10 символов'), django.core.validators.MaxLengthValidator(10000, message='Код не должен превышать 10000 символов')]),
        ),
        migrations.AlterField(
            model_name='task',
            name='description',
            field=models.TextField(validators=[django.core.validators.MinLengthValidator(10, message='Описание должно содержать минимум 10 символов'), django.core.validators.MaxLengthValidator(5000, message='Описание не должно превышать 5000 символов')]),
        ),
        migrations.AlterField(
            model_name='task',
            name='name',
            field=models.CharField(max_length=255, validators=[django.core.validators.MinLengthValidator(3, message='Название должно содержать минимум 3 символа'), django.core.validators.MaxLengthValidator(255, message='Название не должно превышать 255 символов')]),
        ),
        migrations.AlterField(
            model_name='test',
            name='input_data',
            field=models.TextField(help_text='Входные данные для теста (по одному значению на строку)', validators=[django.core.validators.MinLengthValidator(1, message='Входные данные не могут быть пустыми'), django.core.validators.MaxLengthValidator(1000, message='Входные данные не должны превышать 1000 символов')]),
        ),
        migrations.AlterField(
            model_name='test',
            name='output_data',
            field=models.TextField(help_text='Ожидаемые выходные данные (по одному значению на строку)', validators=[django.core.validators.MinLengthValidator(1, message='Выходные данные не могут быть пустыми'), django.core.validators.MaxLengthValidator(1000, message='Выходные данные не должны превышать 1000 символов')]),
        ),
    ]
