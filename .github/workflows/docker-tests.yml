name: Docker Tests

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]

permissions:
  contents: read

jobs:
  docker-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Copy env file and configure for SQLite
      run: |
        cp env.example .env
        echo "DATABASE_URL=sqlite:///db.sqlite3" >> .env
        echo "DEBUG=True" >> .env

    - name: Build Docker images
      run: |
        docker compose build --no-cache

    - name: Start services (without PostgreSQL)
      run: |
        docker compose up -d redis
        # Запускаем server отдельно, чтобы избежать зависимостей от PostgreSQL
        docker compose run -d --name test-server server

    - name: Wait for services to be ready
      run: |
        timeout 30 bash -c 'until docker exec test-server python manage.py check --deploy > /dev/null 2>&1; do sleep 2; done'

    - name: Run database migrations
      run: |
        docker exec test-server python manage.py migrate

    - name: Run Django tests in Docker
      run: |
        docker exec test-server python manage.py test --verbosity=2

    - name: Run specific test suites
      run: |
        echo "Running model tests..."
        docker exec test-server python manage.py test python_code_check_system.test_files.test_models --verbosity=2
        
        echo "Running form tests..."
        docker exec test-server python manage.py test python_code_check_system.test_files.test_forms --verbosity=2
        
        echo "Running view tests..."
        docker exec test-server python manage.py test python_code_check_system.test_files.test_views --verbosity=2
        
        echo "Running core system tests..."
        docker exec test-server python manage.py test python_code_check_system.check_system.tests --verbosity=2

    - name: Test API endpoints
      run: |
        echo "Testing API endpoints..."
        curl -f http://localhost:80/ || echo "Home page test failed"
        curl -f http://localhost:80/accounts/login/ || echo "Login page test failed"
        curl -f http://localhost:80/tasks/ || echo "Tasks page test failed"

    - name: Check service health
      run: |
        echo "Checking service health..."
        docker ps
        docker logs test-server --tail=50
        docker compose logs redis --tail=20

    - name: Cleanup
      if: always()
      run: |
        docker stop test-server || true
        docker rm test-server || true
        docker compose down -v
